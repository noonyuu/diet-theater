// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// MeetingRecord defines model for MeetingRecord.
type MeetingRecord struct {
	CreatedAt     time.Time 
	Date          string    
	DeletedAt     time.Time 
	Id            int       
	Issue         string    
	IssueId       string    
	NameOfHouse   string    
	NameOfMeeting string    
	Session       int       
	UpdatedAt     time.Time 
}

// SpeechRecord defines model for SpeechRecord.
type SpeechRecord struct {
	AnimationPoint  string
	Id              int       
	IssueId         string    
	Speaker         string    
	SpeakerGroup    string    
	SpeakerPosition string    
	SpeakerRole     string    
	SpeakerYomi     string    
	SpeechId        string    
	SpeechOrigin    string    
	SpeechSummary   string
}

// ViewHistory defines model for ViewHistory.
type ViewHistory struct {
	CreatedAt time.Time
	IssueId   string
	UserId    string
}

// PostMeetingRecordInsertJSONRequestBody defines body for PostMeetingRecordInsert for application/json ContentType.
type PostMeetingRecordInsertJSONRequestBody = MeetingRecord

// PostSpeechRecordInsertJSONRequestBody defines body for PostSpeechRecordInsert for application/json ContentType.
type PostSpeechRecordInsertJSONRequestBody = SpeechRecord

// PostViewHistoryInsertJSONRequestBody defines body for PostViewHistoryInsert for application/json ContentType.
type PostViewHistoryInsertJSONRequestBody = ViewHistory

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 疎通確認用
	// (GET /)
	Get(c *gin.Context)
	// 会議レコードの登録
	// (POST /meeting-record/insert)
	PostMeetingRecordInsert(c *gin.Context)
	// 会議レコードの全件取得
	// (GET /meeting-record/select/all)
	GetMeetingRecordSelectAll(c *gin.Context)
	// 会議レコードの1件取得
	// (GET /meeting-record/select/once/{issueID})
	GetMeetingRecordSelectOnceIssueID(c *gin.Context, issueID string)
	// 発言レコードの登録
	// (POST /speech-record/insert)
	PostSpeechRecordInsert(c *gin.Context)
	// 発言レコードの全件取得
	// (GET /speech-record/select/all)
	GetSpeechRecordSelectAll(c *gin.Context)
	// 発言レコードの1件取得
	// (GET /speech-record/select/once/{issueID})
	GetSpeechRecordSelectOnceIssueID(c *gin.Context, issueID string)
	// 発言レコードの1件取得
	// (GET /speech-record/select/once/{issueID}/{speechID})
	GetSpeechRecordSelectOnceIssueIDSpeechID(c *gin.Context, issueID string, speechID string)
	// 閲覧履歴の登録
	// (POST /view-history/insert)
	PostViewHistoryInsert(c *gin.Context)
	// 閲覧履歴の取得
	// (GET /view-history/select/{userID})
	GetViewHistorySelectUserID(c *gin.Context, userID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get(c)
}

// PostMeetingRecordInsert operation middleware
func (siw *ServerInterfaceWrapper) PostMeetingRecordInsert(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMeetingRecordInsert(c)
}

// GetMeetingRecordSelectAll operation middleware
func (siw *ServerInterfaceWrapper) GetMeetingRecordSelectAll(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMeetingRecordSelectAll(c)
}

// GetMeetingRecordSelectOnceIssueID operation middleware
func (siw *ServerInterfaceWrapper) GetMeetingRecordSelectOnceIssueID(c *gin.Context) {

	var err error

	// ------------- Path parameter "issueID" -------------
	var issueID string

	err = runtime.BindStyledParameter("simple", false, "issueID", c.Param("issueID"), &issueID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter issueID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMeetingRecordSelectOnceIssueID(c, issueID)
}

// PostSpeechRecordInsert operation middleware
func (siw *ServerInterfaceWrapper) PostSpeechRecordInsert(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSpeechRecordInsert(c)
}

// GetSpeechRecordSelectAll operation middleware
func (siw *ServerInterfaceWrapper) GetSpeechRecordSelectAll(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSpeechRecordSelectAll(c)
}

// GetSpeechRecordSelectOnceIssueID operation middleware
func (siw *ServerInterfaceWrapper) GetSpeechRecordSelectOnceIssueID(c *gin.Context) {

	var err error

	// ------------- Path parameter "issueID" -------------
	var issueID string

	err = runtime.BindStyledParameter("simple", false, "issueID", c.Param("issueID"), &issueID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter issueID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSpeechRecordSelectOnceIssueID(c, issueID)
}

// GetSpeechRecordSelectOnceIssueIDSpeechID operation middleware
func (siw *ServerInterfaceWrapper) GetSpeechRecordSelectOnceIssueIDSpeechID(c *gin.Context) {

	var err error

	// ------------- Path parameter "issueID" -------------
	var issueID string

	err = runtime.BindStyledParameter("simple", false, "issueID", c.Param("issueID"), &issueID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter issueID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "speechID" -------------
	var speechID string

	err = runtime.BindStyledParameter("simple", false, "speechID", c.Param("speechID"), &speechID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter speechID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSpeechRecordSelectOnceIssueIDSpeechID(c, issueID, speechID)
}

// PostViewHistoryInsert operation middleware
func (siw *ServerInterfaceWrapper) PostViewHistoryInsert(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostViewHistoryInsert(c)
}

// GetViewHistorySelectUserID operation middleware
func (siw *ServerInterfaceWrapper) GetViewHistorySelectUserID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameter("simple", false, "userID", c.Param("userID"), &userID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetViewHistorySelectUserID(c, userID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.Get)
	router.POST(options.BaseURL+"/meeting-record/insert", wrapper.PostMeetingRecordInsert)
	router.GET(options.BaseURL+"/meeting-record/select/all", wrapper.GetMeetingRecordSelectAll)
	router.GET(options.BaseURL+"/meeting-record/select/once/:issueID", wrapper.GetMeetingRecordSelectOnceIssueID)
	router.POST(options.BaseURL+"/speech-record/insert", wrapper.PostSpeechRecordInsert)
	router.GET(options.BaseURL+"/speech-record/select/all", wrapper.GetSpeechRecordSelectAll)
	router.GET(options.BaseURL+"/speech-record/select/once/:issueID", wrapper.GetSpeechRecordSelectOnceIssueID)
	router.GET(options.BaseURL+"/speech-record/select/once/:issueID/:speechID", wrapper.GetSpeechRecordSelectOnceIssueIDSpeechID)
	router.POST(options.BaseURL+"/view-history/insert", wrapper.PostViewHistoryInsert)
	router.GET(options.BaseURL+"/view-history/select/:userID", wrapper.GetViewHistorySelectUserID)
}

type GetRequestObject struct {
}

type GetResponseObject interface {
	VisitGetResponse(w http.ResponseWriter) error
}

type Get200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response Get200JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMeetingRecordInsertRequestObject struct {
	Body *PostMeetingRecordInsertJSONRequestBody
}

type PostMeetingRecordInsertResponseObject interface {
	VisitPostMeetingRecordInsertResponse(w http.ResponseWriter) error
}

type PostMeetingRecordInsert200JSONResponse MeetingRecord

func (response PostMeetingRecordInsert200JSONResponse) VisitPostMeetingRecordInsertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeetingRecordSelectAllRequestObject struct {
}

type GetMeetingRecordSelectAllResponseObject interface {
	VisitGetMeetingRecordSelectAllResponse(w http.ResponseWriter) error
}

type GetMeetingRecordSelectAll200JSONResponse []MeetingRecord

func (response GetMeetingRecordSelectAll200JSONResponse) VisitGetMeetingRecordSelectAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeetingRecordSelectOnceIssueIDRequestObject struct {
	IssueID string `json:"issueID"`
}

type GetMeetingRecordSelectOnceIssueIDResponseObject interface {
	VisitGetMeetingRecordSelectOnceIssueIDResponse(w http.ResponseWriter) error
}

type GetMeetingRecordSelectOnceIssueID200JSONResponse MeetingRecord

func (response GetMeetingRecordSelectOnceIssueID200JSONResponse) VisitGetMeetingRecordSelectOnceIssueIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSpeechRecordInsertRequestObject struct {
	Body *PostSpeechRecordInsertJSONRequestBody
}

type PostSpeechRecordInsertResponseObject interface {
	VisitPostSpeechRecordInsertResponse(w http.ResponseWriter) error
}

type PostSpeechRecordInsert200JSONResponse SpeechRecord

func (response PostSpeechRecordInsert200JSONResponse) VisitPostSpeechRecordInsertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSpeechRecordSelectAllRequestObject struct {
}

type GetSpeechRecordSelectAllResponseObject interface {
	VisitGetSpeechRecordSelectAllResponse(w http.ResponseWriter) error
}

type GetSpeechRecordSelectAll200JSONResponse []SpeechRecord

func (response GetSpeechRecordSelectAll200JSONResponse) VisitGetSpeechRecordSelectAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSpeechRecordSelectOnceIssueIDRequestObject struct {
	IssueID string `json:"issueID"`
}

type GetSpeechRecordSelectOnceIssueIDResponseObject interface {
	VisitGetSpeechRecordSelectOnceIssueIDResponse(w http.ResponseWriter) error
}

type GetSpeechRecordSelectOnceIssueID200JSONResponse SpeechRecord

func (response GetSpeechRecordSelectOnceIssueID200JSONResponse) VisitGetSpeechRecordSelectOnceIssueIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSpeechRecordSelectOnceIssueIDSpeechIDRequestObject struct {
	IssueID  string `json:"issueID"`
	SpeechID string `json:"speechID"`
}

type GetSpeechRecordSelectOnceIssueIDSpeechIDResponseObject interface {
	VisitGetSpeechRecordSelectOnceIssueIDSpeechIDResponse(w http.ResponseWriter) error
}

type GetSpeechRecordSelectOnceIssueIDSpeechID200JSONResponse SpeechRecord

func (response GetSpeechRecordSelectOnceIssueIDSpeechID200JSONResponse) VisitGetSpeechRecordSelectOnceIssueIDSpeechIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostViewHistoryInsertRequestObject struct {
	Body *PostViewHistoryInsertJSONRequestBody
}

type PostViewHistoryInsertResponseObject interface {
	VisitPostViewHistoryInsertResponse(w http.ResponseWriter) error
}

type PostViewHistoryInsert200JSONResponse ViewHistory

func (response PostViewHistoryInsert200JSONResponse) VisitPostViewHistoryInsertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetViewHistorySelectUserIDRequestObject struct {
	UserID string `json:"userID"`
}

type GetViewHistorySelectUserIDResponseObject interface {
	VisitGetViewHistorySelectUserIDResponse(w http.ResponseWriter) error
}

type GetViewHistorySelectUserID200JSONResponse []struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	IssueId   *string    `json:"issue_id,omitempty"`
}

func (response GetViewHistorySelectUserID200JSONResponse) VisitGetViewHistorySelectUserIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 疎通確認用
	// (GET /)
	Get(ctx context.Context, request GetRequestObject) (GetResponseObject, error)
	// 会議レコードの登録
	// (POST /meeting-record/insert)
	PostMeetingRecordInsert(ctx context.Context, request PostMeetingRecordInsertRequestObject) (PostMeetingRecordInsertResponseObject, error)
	// 会議レコードの全件取得
	// (GET /meeting-record/select/all)
	GetMeetingRecordSelectAll(ctx context.Context, request GetMeetingRecordSelectAllRequestObject) (GetMeetingRecordSelectAllResponseObject, error)
	// 会議レコードの1件取得
	// (GET /meeting-record/select/once/{issueID})
	GetMeetingRecordSelectOnceIssueID(ctx context.Context, request GetMeetingRecordSelectOnceIssueIDRequestObject) (GetMeetingRecordSelectOnceIssueIDResponseObject, error)
	// 発言レコードの登録
	// (POST /speech-record/insert)
	PostSpeechRecordInsert(ctx context.Context, request PostSpeechRecordInsertRequestObject) (PostSpeechRecordInsertResponseObject, error)
	// 発言レコードの全件取得
	// (GET /speech-record/select/all)
	GetSpeechRecordSelectAll(ctx context.Context, request GetSpeechRecordSelectAllRequestObject) (GetSpeechRecordSelectAllResponseObject, error)
	// 発言レコードの1件取得
	// (GET /speech-record/select/once/{issueID})
	GetSpeechRecordSelectOnceIssueID(ctx context.Context, request GetSpeechRecordSelectOnceIssueIDRequestObject) (GetSpeechRecordSelectOnceIssueIDResponseObject, error)
	// 発言レコードの1件取得
	// (GET /speech-record/select/once/{issueID}/{speechID})
	GetSpeechRecordSelectOnceIssueIDSpeechID(ctx context.Context, request GetSpeechRecordSelectOnceIssueIDSpeechIDRequestObject) (GetSpeechRecordSelectOnceIssueIDSpeechIDResponseObject, error)
	// 閲覧履歴の登録
	// (POST /view-history/insert)
	PostViewHistoryInsert(ctx context.Context, request PostViewHistoryInsertRequestObject) (PostViewHistoryInsertResponseObject, error)
	// 閲覧履歴の取得
	// (GET /view-history/select/{userID})
	GetViewHistorySelectUserID(ctx context.Context, request GetViewHistorySelectUserIDRequestObject) (GetViewHistorySelectUserIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Get operation middleware
func (sh *strictHandler) Get(ctx *gin.Context) {
	var request GetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get(ctx, request.(GetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetResponseObject); ok {
		if err := validResponse.VisitGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostMeetingRecordInsert operation middleware
func (sh *strictHandler) PostMeetingRecordInsert(ctx *gin.Context) {
	var request PostMeetingRecordInsertRequestObject

	var body PostMeetingRecordInsertJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMeetingRecordInsert(ctx, request.(PostMeetingRecordInsertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMeetingRecordInsert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostMeetingRecordInsertResponseObject); ok {
		if err := validResponse.VisitPostMeetingRecordInsertResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMeetingRecordSelectAll operation middleware
func (sh *strictHandler) GetMeetingRecordSelectAll(ctx *gin.Context) {
	var request GetMeetingRecordSelectAllRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeetingRecordSelectAll(ctx, request.(GetMeetingRecordSelectAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeetingRecordSelectAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMeetingRecordSelectAllResponseObject); ok {
		if err := validResponse.VisitGetMeetingRecordSelectAllResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMeetingRecordSelectOnceIssueID operation middleware
func (sh *strictHandler) GetMeetingRecordSelectOnceIssueID(ctx *gin.Context, issueID string) {
	var request GetMeetingRecordSelectOnceIssueIDRequestObject

	request.IssueID = issueID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeetingRecordSelectOnceIssueID(ctx, request.(GetMeetingRecordSelectOnceIssueIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeetingRecordSelectOnceIssueID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMeetingRecordSelectOnceIssueIDResponseObject); ok {
		if err := validResponse.VisitGetMeetingRecordSelectOnceIssueIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSpeechRecordInsert operation middleware
func (sh *strictHandler) PostSpeechRecordInsert(ctx *gin.Context) {
	var request PostSpeechRecordInsertRequestObject

	var body PostSpeechRecordInsertJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSpeechRecordInsert(ctx, request.(PostSpeechRecordInsertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSpeechRecordInsert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSpeechRecordInsertResponseObject); ok {
		if err := validResponse.VisitPostSpeechRecordInsertResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpeechRecordSelectAll operation middleware
func (sh *strictHandler) GetSpeechRecordSelectAll(ctx *gin.Context) {
	var request GetSpeechRecordSelectAllRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpeechRecordSelectAll(ctx, request.(GetSpeechRecordSelectAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpeechRecordSelectAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSpeechRecordSelectAllResponseObject); ok {
		if err := validResponse.VisitGetSpeechRecordSelectAllResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpeechRecordSelectOnceIssueID operation middleware
func (sh *strictHandler) GetSpeechRecordSelectOnceIssueID(ctx *gin.Context, issueID string) {
	var request GetSpeechRecordSelectOnceIssueIDRequestObject

	request.IssueID = issueID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpeechRecordSelectOnceIssueID(ctx, request.(GetSpeechRecordSelectOnceIssueIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpeechRecordSelectOnceIssueID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSpeechRecordSelectOnceIssueIDResponseObject); ok {
		if err := validResponse.VisitGetSpeechRecordSelectOnceIssueIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpeechRecordSelectOnceIssueIDSpeechID operation middleware
func (sh *strictHandler) GetSpeechRecordSelectOnceIssueIDSpeechID(ctx *gin.Context, issueID string, speechID string) {
	var request GetSpeechRecordSelectOnceIssueIDSpeechIDRequestObject

	request.IssueID = issueID
	request.SpeechID = speechID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpeechRecordSelectOnceIssueIDSpeechID(ctx, request.(GetSpeechRecordSelectOnceIssueIDSpeechIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpeechRecordSelectOnceIssueIDSpeechID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSpeechRecordSelectOnceIssueIDSpeechIDResponseObject); ok {
		if err := validResponse.VisitGetSpeechRecordSelectOnceIssueIDSpeechIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostViewHistoryInsert operation middleware
func (sh *strictHandler) PostViewHistoryInsert(ctx *gin.Context) {
	var request PostViewHistoryInsertRequestObject

	var body PostViewHistoryInsertJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostViewHistoryInsert(ctx, request.(PostViewHistoryInsertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostViewHistoryInsert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostViewHistoryInsertResponseObject); ok {
		if err := validResponse.VisitPostViewHistoryInsertResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetViewHistorySelectUserID operation middleware
func (sh *strictHandler) GetViewHistorySelectUserID(ctx *gin.Context, userID string) {
	var request GetViewHistorySelectUserIDRequestObject

	request.UserID = userID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetViewHistorySelectUserID(ctx, request.(GetViewHistorySelectUserIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetViewHistorySelectUserID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetViewHistorySelectUserIDResponseObject); ok {
		if err := validResponse.VisitGetViewHistorySelectUserIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX08bRxD/Kum2j8ZnA21Tv6Wq1PBQNSpp+1Ah63oe7E3vbre7e6TIssSZQBKVJK1C",
	"jOAlJUkDQiU1aZVUENEPsxjb36LaPePY57ONY3D/IQud73Zmdn/zm9/MOY8s4lDigis4SuURt3LgmPry",
	"EwCB3exnYBGWUTcoIxSYwKAfWwxMAZm0KdQ3+M50qA0ohcYT48mxhPpcTSRS+oNiaJYwR61EGVPAmMAO",
	"oBgS81RZcMGwm0WFmH7YzVvkerDhrPeAM22+ks0l2BWQBabXcO6FNxrpS61Lhzyi5PjE5LvvvX/xg9aL",
	"KHPXdCBNZtM54vFQuNrmcm23XF9/1MvOCTLYbnm0f6v6bO3o1UZttxxlzIFzTNz+IHg0c8YEKDTvkK+v",
	"gSVUlGkKYOW6kdB0sWMKTNw0JdgNbSSSMudC27+Thm9OL07B/AZYu3Vlb6+6Wq482akv3u1hlM4y4tEQ",
	"J2/uVFf3jss/Hv1xUFna6GVNCccizDJUWV6qlx5XX96r/rBcebJVu/m4lw9G7FBRVLZWK/c36w9e9jKb",
	"Jw5uN5PFG9I/lP5P0n8oi3ekv9zFHqxcB9oBwokm1sFVDweE4SwOHVz692VxRfrfy+Jt6f8qF/x4PN7D",
	"B/ccx2TzocLWJS39reNSWfpr0r9xvPpndbck/ZXq+n5tc1v6D3SUQ/30oVwoRoUYTVl/geH6ZcwFCU5x",
	"/q1lyFrxOLA3te48v7qF3Vmi3AkstLNLV6YuXNXXMTQHLNBglIwnVHhCwTUpRik0EU/EVQxqipwGy1D/",
	"sqChUiBqOZzKoBT6GASKIQacEpcHyI4nEhpg4goI5NKk1MaWNjKu8aAigyGgMy8OcG5mQ0V3GWybxC58",
	"SZideavl77Q4ZIBbDNNADRD3LAs4v9A8iTZr8h1VS3frCxvVR/u1nTvV1W0VxMxylPoKZWDW9GyBZpSB",
	"0Wh9Y0w3DgO7HJg+LyU8AqorhIu2eWcqMFDwfesBFx+SzPxAyL3DYBal0NvG6/nKaAxXRvtkpVFQYTCD",
	"DEoJ5kFhyLQNGHywFDR0ZvEXWfxNLr6Si7el/6y6flBfed6SjpPZIzIdHGywhGHadi/ytu10Wptcsu1h",
	"KY0FOHxAkJrENRkz588MtMrS9tHBi8q9UuVwbUDoiGuBkdeiNvVRYUAUP3UtmApMtZIw0wEBTAXPh85V",
	"2y0fb97S61TT0rKDgglTzSJNJ+38jbXgHRaBmX8dt5P9kxT05UHUpnWuPVexaRugR6w1nbEHVPv1/dr2",
	"Qj+pCcCPzMTphKZ1m6PVmXaAhpeZSMC6yEx/2E4vMp0I/mc15lw4nTyLBBn5YNEwuZpueBh9zmLhEAFQ",
	"3ULw1xv9X/NiDsP1sVzwJnWqxtPy5nWufaf1DW/Ebacj9GCZqJee155uVfZ+Pt79ParfKMjTDcijstAo",
	"zrx6Z+xTiy07DUrxc23Tr/rk4lNFkeKLbtXhnbgZXW00+90//F0+6teIYdtuiDEdFRtmjP6Zlc2dJNdj",
	"NkqhnBCUpwzDJpZp5wgXqYuTkxOGSamBCjOFvwIAAP//7jKoe6oXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
